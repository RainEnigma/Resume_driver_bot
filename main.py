from contextlib import closing
from data import texts_bot
import psycopg2
import telebot, datetime, logging.config
import data.datas, data
from data import exeptions
from telebot import types
import admin_conf
from database import creating_tab_count

import continue_working, thread_start_func, choose_city, choosing_time
from database import creating_table, delete_data
from data import config

# import cherrypy
#
# WEBHOOK_HOST = config.WEBHOOK_HOST
# WEBHOOK_PORT = 443  # 443, 80, 88 –∏–ª–∏ 8443 (–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç!)
# WEBHOOK_LISTEN = config.WEBHOOK_HOST  # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–∏–¥–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ IP, —á—Ç–æ –∏ –≤—ã—à–µ
#
# WEBHOOK_SSL_CERT = './webhook_cert.pem'  # –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
# WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
#
# WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
# WEBHOOK_URL_PATH = "/%s/" % (config.API_TOKEN)
#
# bot = telebot.TeleBot(config.API_TOKEN)
#
# # –ù–∞—à –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä
# class WebhookServer(object):
#     @cherrypy.expose
#     def index(self):
#         if 'content-length' in cherrypy.request.headers and \
#                 'content-type' in cherrypy.request.headers and \
#                 cherrypy.request.headers['content-type'] == 'application/json':
#             length = int(cherrypy.request.headers['content-length'])
#             json_string = cherrypy.request.body.read(length).decode("utf-8")
#             update = telebot.types.Update.de_json(json_string)
#             # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#             bot.process_new_updates([update])
#             return ''
#         else:
#             raise cherrypy.HTTPError(403)


logging.config.fileConfig(fname='data/logging.conf')
logger = logging.getLogger(name="mainFunc")

bot = telebot.TeleBot(config.API_TOKEN, threaded=True)

logger.info("Program started")

creating_table.creating_tables_in_DB("driver")
creating_table.creating_tables_in_DB("passenger")
list_admins = [688033543, 238008205]


def func_del_messages(message, numb_of_messages):
    try:
        for num in range(numb_of_messages):
            bot.delete_message(message.chat.id, message.message_id - num)
    except Exception:
        pass


creating_tab_count.create_tab_count("users")


@bot.message_handler(commands=['help'])
def help(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_start = types.KeyboardButton("/start")
    markup.row(button_start)
    bot.send_message(message.chat.id,
                     texts_bot.text_help,
                     reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=['start'])
def start(message):
    func_del_messages(message, 100)  # —É–¥–∞–ª—è–µ–º –¥–æ 100 –ø—Ä–µ–¥–∏–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    if message.from_user.id in list_admins:
        admin_conf.admin_conf(bot=bot, message=message)

    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        button_driver = types.InlineKeyboardButton(text="üöô –í–æ–¥–∏—Ç–µ–ª—å", callback_data="–í–æ–¥–∏—Ç–µ–ª—å")
        button_passenger = types.InlineKeyboardButton(text="üö∂‚Äç‚ôÇ –ü–∞—Å—Å–∞–∂–∏—Ä", callback_data="–ü–∞—Å—Å–∞–∂–∏—Ä")
        markup.add(button_driver, button_passenger)

        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–¥ –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!\n"
                         "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–æ—Ç-–ø–æ–ø—É—Ç—á–∏–∫üöó!\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n",
                         reply_markup=markup)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == '–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π' and message.from_user.id in list_admins:
        func_del_messages(message, 5)

        with closing(psycopg2.connect(dbname=data.datas.name_DB,
                                      user=data.datas.user_DB,
                                      password=data.datas.password_DB,
                                      host=data.datas.host_DB)) as conn:
            conn.autocommit = True
            with conn.cursor() as cursor:
                cursor.execute(f"""SELECT numb FROM users""")
                answers_cur = cursor.fetchall()

        bot.send_message(message.from_user.id, f"üßû‚Äç‚ôÇ –Ω–∞—Å —É–∂–µ - {answers_cur[-1][0]} —á–µ–ª.")
        start(message)

    if message.text == '–æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω' and message.from_user.id in list_admins:
        func_del_messages(message, 100)


# —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    markup_start_help = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_start_help.row('/start', '/help')
    if call.message:

        if call.data == 'okokok':
            bot.send_chat_action(call.message.chat.id, 'typing')
            func_del_messages(call.message, 2)
            start(call.message)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å
        if call.data == "–í–æ–¥–∏—Ç–µ–ª—å":
            bot.send_chat_action(call.message.chat.id, 'upload_video_note')
            func_del_messages(call.message, 10)

            if call.message.chat.username is None:
                img = open('data/settings_user_name.gif', 'rb')
                bot.send_document(call.message.chat.id, img)
                markup = types.InlineKeyboardMarkup(row_width=1)
                button_ok = types.InlineKeyboardButton(text="–ú–Ω–µ –≤—Å–µ —è—Å–Ω–æ üëå", callback_data="okokok")
                markup.add(button_ok)

                bot.send_message(call.message.chat.id,
                                 '–í –í–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" (Username). '
                                 '–ò–º—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –í–∞–º–∏ '
                                 '–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –ø–∞—Å—Å–∞–∂–∏—Ä—ã (–ø—Ä–∏ —ç—Ç–æ–º –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –±—É–¥–µ—Ç '
                                 '–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω).\n'
                                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞.',
                                 reply_markup=markup)

            else:
                delete_data.delete_data(user_id=call.from_user.id,
                                        columt_to_change='user_id',
                                        tab_name='driver')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
                button_location = types.KeyboardButton("–ü–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ "
                                                       "–∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏",
                                                       request_location=True)

                markup.row(button_location)
                markup.row('/start', '/help')

                message_id_to_del = bot.send_message(call.message.chat.id,
                                                     "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ - "
                                                     "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞\n"
                                                     "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ (–ü–ì–¢, —Å–µ–ª–æ) –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.\n\n"
                                                     "‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùó (–ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä—É—á–Ω—É—é)Ô∏è\n\n "
                                                     "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n "
                                                     "‚ùå–ö–∏–µ–≤, –ñ–∏–ª—è–Ω—Å–∫–∞—è 24\n "
                                                     "‚ùå–°–≤—è—Ç–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ –õ–µ—Å–∏ —É–∫—Ä–∞–∏–Ω–∫–∏ 2\n\n "
                                                     "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n "
                                                     "‚úÖ–ö–∏–µ–≤\n "
                                                     "‚úÖ–°–≤—è—Ç–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ",
                                                     reply_markup=markup).message_id

                bot.register_next_step_handler(call.message,
                                               choose_city.chose_city,
                                               'start',
                                               message_id_to_del,
                                               'driver',
                                               bot)

        if call.data == "–ü–∞—Å—Å–∞–∂–∏—Ä":
            try:
                for num in range(10):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                pass
            delete_data.delete_data(user_id=call.from_user.id,
                                    columt_to_change='user_id',
                                    tab_name='passenger')

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            button_location = types.KeyboardButton("–ü–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ "
                                                   "–∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏",
                                                   request_location=True)
            markup.row(button_location)
            markup.row('/start', '/help')

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ - "
                                                 "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞\n"
                                                 "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ (–ü–ì–¢, —Å–µ–ª–æ) –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.\n\n"
                                                 "‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùó (–ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä—É—á–Ω—É—é)Ô∏è\n\n "
                                                 "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n "
                                                 "‚ùå–ö–∏–µ–≤, –ñ–∏–ª—è–Ω—Å–∫–∞—è 24\n "
                                                 "‚ùå–°–≤—è—Ç–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ –õ–µ—Å–∏ —É–∫—Ä–∞–∏–Ω–∫–∏ 2\n\n "
                                                 "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n "
                                                 "‚úÖ–ö–∏–µ–≤\n "
                                                 "‚úÖ–°–≤—è—Ç–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ",
                                                 reply_markup=markup).message_id

            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'start',
                                           message_id_to_del,
                                           'passenger',
                                           bot)
        # –≤–æ–¥–∏—Ç–µ–ª—å –î–ê
        if call.data == "start_driver_point_yes":

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ üèô "
                                                 "–≥–æ—Ä–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:",
                                                 reply_markup=markup_start_help).message_id
            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in start_driver_point_yes message to delete not found")

            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'end',
                                           message_id_to_del,
                                           'driver',
                                           bot)
        # –≤–æ–¥–∏—Ç–µ–ª—å –ù–ï–¢
        if call.data == "start_driver_point_no":
            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in start_driver_point_no message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ:\n"
                                                 "–í–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞:",
                                                 reply_markup=markup_start_help).message_id
            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'start',
                                           message_id_to_del,
                                           'driver',
                                           bot)

        # –ø–∞—Å—Å–∞–∂–∏—Ä –î–ê
        if call.data == "start_passenger_point_yes":

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ üèô "
                                                 "–≥–æ—Ä–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:",
                                                 reply_markup=markup_start_help).message_id
            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id,
                                       call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in start_passenger_point_yes message to delete not found")

            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'end',
                                           message_id_to_del,
                                           'passenger',
                                           bot)

        # –ø–∞—Å—Å–∞–∂–∏—Ä –ù–ï–¢
        if call.data == "start_passenger_point_no":
            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in start_passenger_point_no message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ:\n"
                                                 "–í–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞:",
                                                 reply_markup=markup_start_help).message_id
            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'start',
                                           message_id_to_del,
                                           'passenger',
                                           bot)

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –í–æ–¥–∏—Ç–µ–ª—è

        if call.data == "end_driver_point_yes":
            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in end_driver_point_yes message to delete not found")

            markup = types.InlineKeyboardMarkup(row_width=2)
            button_today = types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è",
                                                      callback_data="driver_today")
            button_tomorrow = types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞",
                                                         callback_data="driver_tomorrow")
            markup.add(button_today, button_tomorrow)
            bot.send_message(call.message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∫–æ–≥–¥–∞ –µ–¥–µ–º?", reply_markup=markup)

        if call.data == "end_driver_point_no":

            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in end_driver_point_no message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ:\n"
                                                 "–í–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:",
                                                 reply_markup=markup_start_help).message_id
            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'end',
                                           message_id_to_del,
                                           'driver',
                                           bot)

        #     –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –ü–∞—Å—Å–∞–∂–∏—Ä–∞
        if call.data == "end_passenger_point_yes":

            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in end_passenger_point_yes message to delete not found")

            markup = types.InlineKeyboardMarkup(row_width=2)
            button_today = types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è",
                                                      callback_data="passenger_today")
            button_tomorrow = types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞",
                                                         callback_data="passenger_tomorrow")
            markup.add(button_today, button_tomorrow)
            bot.send_message(call.message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∫–æ–≥–¥–∞ –µ–¥–µ–º?", reply_markup=markup)

        if call.data == "end_passenger_point_no":

            try:
                for num in range(3):
                    bot.delete_message(call.message.chat.id, call.message.message_id - num)
            except Exception:
                logger.info(
                    f"USER - {call.message.chat.id} in end_passenger_point_no message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ:\n"
                                                 "–í–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:",
                                                 reply_markup=markup_start_help).message_id
            bot.register_next_step_handler(call.message,
                                           choose_city.chose_city,
                                           'end',
                                           message_id_to_del,
                                           'passenger',
                                           bot)

        #     –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –í–æ–¥–∏—Ç–µ–ª—è
        if call.data == "driver_today":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception:
                logger.info(f"USER - {call.message.chat.id} in driver_today "
                            f"message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è\n"
                                                 "–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00").message_id
            my_time = datetime.datetime.now().strftime('%d.%m.%Y')
            bot.register_next_step_handler(call.message,
                                           choosing_time.chose_time,
                                           my_time, message_id_to_del,
                                           'driver',
                                           bot)

        if call.data == "driver_tomorrow":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception:
                logger.info(f"USER - {call.message.chat.id} in driver_tomorrow "
                            f"message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è\n"
                                                 "–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00").message_id

            # –Ω–∞—Ö–æ–¥–∏–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
            date_tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            my_time = date_tomorrow.strftime('%d.%m.%Y')

            bot.register_next_step_handler(call.message,
                                           choosing_time.chose_time,
                                           my_time,
                                           message_id_to_del,
                                           'driver',
                                           bot)

        #     –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –ü–∞—Å—Å–∞–∂–∏—Ä–∞
        if call.data == "passenger_today":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception:
                logger.info(f"USER - {call.message.chat.id} in passenger_today "
                            f"message to delete not found")
            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è\n"
                                                 "–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00").message_id
            my_time = datetime.datetime.now().strftime('%d.%m.%Y')
            bot.register_next_step_handler(call.message,
                                           choosing_time.chose_time,
                                           my_time,
                                           message_id_to_del,
                                           'passenger',
                                           bot)

        if call.data == "passenger_tomorrow":

            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception:
                logger.info(f"USER - {call.message.chat.id} in passenger_tomorrow "
                            f"message to delete not found")

            message_id_to_del = bot.send_message(call.message.chat.id,
                                                 "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è\n"
                                                 "–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00").message_id

            # –Ω–∞—Ö–æ–¥–∏–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
            date_tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            my_time = date_tomorrow.strftime('%d.%m.%Y')

            bot.register_next_step_handler(call.message,
                                           choosing_time.chose_time,
                                           my_time,
                                           message_id_to_del,
                                           'passenger',
                                           bot)


if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except exeptions.Something_with_poling as e:
        print(f"bot_poling - {e}")

# # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Ågi—Ç–∞–Ω–æ–≤–∫–æ–π (–∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º)
# bot.remove_webhook()
#
# # –°—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ –≤–µ–±—Ö—É–∫
# bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
#                 certificate=open(WEBHOOK_SSL_CERT, 'r'))
#
# cherrypy.config.update({
#     'server.socket_host': WEBHOOK_LISTEN,
#     'server.socket_port': WEBHOOK_PORT,
#     'server.ssl_module': 'builtin',
#     'server.ssl_certificate': WEBHOOK_SSL_CERT,
#     'server.ssl_private_key': WEBHOOK_SSL_PRIV
# })
#
# cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})
#
try:
    thread_start_func.set_interval(continue_working.continue_working, 5)
except Exception as e:
    logger.info(f"problem in passenger_search - {e}")
