from database import adding_user_id, working_with_db
from geopy.geocoders import Nominatim, GeocodeEarth
import apply_chosen_address
import chosing_street
import main
from add_statistics import adding_stat
from telebot import types


def chose_city(message, argum, message_id_to_del, arg_role, bot):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –µ–≥–æ –≤ –ë–î
    if argum == 'start':
        adding_user_id.adding_user_id(table_name=arg_role,
                                      user_id=message.from_user.id,
                                      user_name=message.from_user.username)
        adding_stat(user_id=message.from_user.id,
                    user_name=message.from_user.username,
                    name=message.from_user.first_name,
                    last_name=message.from_user.last_name)

    try:
        mes_to_rep = message.reply_to_message.text
        if mes_to_rep == '–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ - ' \
                         '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞\n' \
                         '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ üèô –≥–æ—Ä–æ–¥ (–ü–ì–¢, —Å–µ–ª–æ) –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.\n\n' \
                         '‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùó (–ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä—É—á–Ω—É—é)Ô∏è\n\n ' \
                         '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n ' \
                         '‚ùå–ö–∏–µ–≤, –ñ–∏–ª—è–Ω—Å–∫–∞—è 24\n ' \
                         '‚ùå–°–≤—è—Ç–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ –õ–µ—Å–∏ —É–∫—Ä–∞–∏–Ω–∫–∏ 2\n\n ' \
                         '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n ' \
                         '‚úÖ–ö–∏–µ–≤\n ' \
                         '‚úÖ–°–≤—è—Ç–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–µ':
            bot.send_chat_action(message.chat.id, 'find_location')
            bot.delete_message(message.chat.id, message_id_to_del)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row('/start', '/help')

            bot.send_message(message.chat.id,
                             '–æ—Ç–ª–∏—á–Ω–æ, –º—ã –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –í–∞—à–µ–π –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏!',
                             reply_markup=markup)
            working_with_db.manage_db(user_id=message.from_user.id,
                                      column_to_change='start_lat',
                                      data_to_chanme=message.location.latitude,
                                      tab_name=arg_role)
            working_with_db.manage_db(user_id=message.from_user.id,
                                      column_to_change='start_lon',
                                      data_to_chanme=message.location.longitude,
                                      tab_name=arg_role)

            try:
                geolocator = Nominatim(user_agent="my-application")
                address_driver = geolocator.reverse(f"{str(message.location.latitude)},"
                                                    f" {str(message.location.longitude)}",
                                                    language=message.from_user.language_code).address

                address_driver = address_driver.split(',')
                street_driver = ', '.join(address_driver[4::-1])
                city_driver = address_driver[-3]

                working_with_db.manage_db(message.from_user.id,
                                          'start_street',
                                          street_driver,
                                          arg_role)

                working_with_db.manage_db(message.from_user.id,
                                          'start_city',
                                          city_driver,
                                          arg_role)

            except Exception as e:
                print(f'geolocation in chose_city{e}')
            apply_chosen_address.applying_chosen_address(message, argum, arg_role)

    except Exception:
        if message.text == None or message.text == 'None':
            bot.register_next_step_handler(message,
                                           chose_city,
                                           'start',
                                           message_id_to_del,
                                           'driver',
                                           bot)
        elif (str(message.text)).lower() == '/start':
            main.start(message)

        elif (str(message.text)).lower() == '/help':
            main.help(message)

        else:
            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message_id_to_del)
            except Exception:
                pass
            try:

                geolocator = Nominatim(user_agent="my-application")

                location = geolocator.geocode(f"{message.text}, –£–∫—Ä–∞–∏–Ω–∞",
                                              language=message.from_user.language_code)




            except Exception as e:
                print(f"geolocation in choose_city {e}")
            try:
                if location != None:

                    # ???neponiatno
                    bot.clear_reply_handlers_by_message_id(message.chat.id)

                    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
                    working_with_db.manage_db(message.from_user.id,
                                              f'{argum}_city',
                                              message.text,
                                              arg_role)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.row('/start', '/help')
                    if argum == 'start':

                        message_id_to_del = bot.send_message(message.chat.id,
                                                             "–í–≤–µ–¥–∏—Ç–µ üè° —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:\n"
                                                             "(–Ω–∞–ø—Ä–∏–º–µ—Ä –ü–æ–±–µ–¥—ã 24 –∏–ª–∏ –º–µ—Ç—Ä–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)",
                                                             reply_markup=markup).message_id
                    if argum == 'end':
                        message_id_to_del = bot.send_message(message.chat.id,
                                                             "–í–≤–µ–¥–∏—Ç–µ üè° —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:\n"
                                                             "(–Ω–∞–ø—Ä–∏–º–µ—Ä –ü–æ–±–µ–¥—ã 24 –∏–ª–∏ –º–µ—Ç—Ä–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)",
                                                             reply_markup=markup).message_id
                    # –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Ñ-—è "chose_start_route"
                    bot.register_next_step_handler(message,
                                                   chosing_street.chose_route,
                                                   argum,
                                                   message_id_to_del,
                                                   arg_role,
                                                   bot)
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.row('/start', '/help')
                    message_id_to_del = bot.send_message(message.from_user.id,
                                                         "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π üèô "
                                                         "–≥–æ—Ä–æ–¥ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ –¥—Ä—É–≥–æ–º—É!",
                                                         reply_markup=markup).message_id
                    bot.register_next_step_handler(message,
                                                   chose_city,
                                                   argum,
                                                   message_id_to_del,
                                                   arg_role,
                                                   bot)
            except Exception:
                pass
